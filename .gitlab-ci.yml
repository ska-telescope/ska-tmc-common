# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.
image: artefact.skao.int/ska-tango-images-pytango-builder:9.3.10

# cache is used to specify a list of files and directories which should be cached between jobs. You can only use paths that are within the project workspace.
# If cache is defined outside the scope of jobs, it means it is set globally and all jobs will use that definition
cache:
  paths:
    - build

# The YAML file defines a set of jobs with constraints stating when they should be run.
# You can specify an unlimited number of jobs which are defined as top-level elements with an arbitrary name and always have to contain at least the script clause.
# In this case we have only the test job which produce an artifacts (it must be placed into a directory called "public")
# It is also specified that only the master branch will be subject of this job.

stages:
  - build
  - test
  - linting
  - publish
  - pages
  - release

clean shell runner:
  stage: .pre
  tags:
    - docker-executor
  script:
    # Gitlab CI badges creation
    - rm -rf build/*

unit tests:
  stage: test
  image: artefact.skao.int/ska-tango-images-pytango-builder:9.3.10
  tags:
    - docker-executor
  script:
    - make unit-test
  artifacts:
    paths:
      - ./build

linting:
  stage: linting
  image: artefact.skao.int/ska-tango-images-pytango-builder:9.3.10
  tags:
    - docker-executor
  script:
    - make lint
  artifacts:
    paths:
      - ./build

release docker image:
  stage: release
  image: $SKA_K8S_TOOLS_DEPLOY_IMAGE
  before_script:
  - docker login -u $CAR_OCI_REGISTRY_USERNAME -p $CAR_OCI_REGISTRY_PASSWORD $CAR_OCI_REGISTRY_HOST
  tags:
    - docker-executor
  script:
    - make build
    - make push
  rules:
    # Images only allow manual run on tags, and confirm semantic versioning of tag
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^((([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)$/'
      when: manual
      allow_failure: true

pages:
  stage: pages
  tags:
    - docker-executor
  script:
    - mkdir .public
    - cp -R build .public
    - mv .public public
  only:
    - master
  artifacts:
    paths:
      - public

include:
  # Create Gitlab CI badges from CI metrics
  # https://developer.skatelescope.org/en/latest/tools/continuousintegration.html#automated-collection-of-ci-health-metrics-as-part-of-the-ci-pipeline
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/post_step.yml'
  # Publish Python packages
  # https://developer.skao.int/en/latest/tools/software-package-release-procedure.html#building-and-publishing-python-packages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/build_wheel.yml'
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/oci-image.gitlab-ci.yml'